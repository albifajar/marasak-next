import { useSpeechSynthesis } from 'react-speech-kit'
import { useState, useRef, useEffect } from 'react'
import { Container } from '@components/Layout'
import Countdown from 'react-countdown'
import Head from 'next/head'
import Link from 'next/link'
import { ArrowLeft, ArrowLeftRounded, ArrowRightRounded, Repeat, PlayIcon, StopIcon } from '@components/Icons'
import { fetcher } from '@services/fetcher'
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'

const CookingStepPage = ({ slug }) => {
  const [currentStep, setCurrentStep] = useState(0)
  const [changeStep, setChangeStep] = useState('')
  const [repeatStep, setRepeatStep] = useState('')
  const [command, setCommand] = useState('')
  const [isPlay, setIsPlay] = useState(false)
  const countdownRef = useRef(null)
  const audioRef = useRef(null)
  const [isSpeak, setIsSpeak] = useState(true)
  const { speak, speaking } = useSpeechSynthesis({
    onEnd: () => {
      setIsSpeak(false)
    }
  })

  const [steps, setSteps] = useState([])

  const getRecipe = () => {
    fetcher(process.env.API_URL + '/recipes/' + slug + '?populate=deep').then((data) =>
      setSteps(data?.data?.attributes?.steps)
    )
  }

  // console.log(currentStep)
  useEffect(() => {
    getRecipe()
    return
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const nextStep = () => {
    setIsSpeak(true)
    if (currentStep === steps.length - 1) {
      setCurrentStep(steps.length - 1)
    } else {
      const nextIndex = currentStep + 1
      setCurrentStep(nextIndex)
    }
  }

  const prevStep = () => {
    setIsSpeak(true)
    if (currentStep === 0) {
      setCurrentStep(0)
    } else {
      const nextIndex = currentStep - 1
      setCurrentStep(nextIndex)
    }
  }

  // Random component
  const Completionist = () => <p className="text-center">Selesai ayo cek masakanmu</p>

  // Renderer callback with condition
  const renderer = ({ hours, minutes, seconds, completed }) => {
    if (completed) {
      // Render a completed state
      audioRef.current.play()
      return <Completionist />
    } else {
      // Render a countdown
      return (
        <span>
          {hours}:{minutes}:{seconds}
        </span>
      )
    }
  }

  const StartTimer = () => {
    setIsPlay(true)
    countdownRef.current.start()
  }

  const PauseTimer = () => {
    setIsPlay(false)
    countdownRef.current.pause()
  }

  const handleSpeak = () => {
    if (steps.length != 0) {
      speak({
        default: true,
        lang: 'id',
        localService: true,
        name: 'Karen',
        voiceURI: 'Karen',
        text: `${steps[currentStep].description}`
      })
    }
    SpeechRecognition.stopListening()
  }

  useEffect(() => {
    handleSpeak()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [changeStep, repeatStep])

  setTimeout(() => {
    if (steps.length != 0) {
      setChangeStep(steps[currentStep].description)
    }
  }, 1000)

  const repeater = () => {
    setIsSpeak(true)
    setRepeatStep(`${Math.random()}`)
  }

  const { transcript, resetTranscript } = useSpeechRecognition()

  useEffect(() => {
    if (isSpeak !== true) {
      SpeechRecognition.startListening({
        continuous: true,
        language: 'id'
      })
      console.log('listening Start...')
    }
  }, [isSpeak])

  const allWords = transcript.split(' ')

  useEffect(() => {
    if (command === 'lanjut') {
      nextStep()
    } else if (command === 'ulangi') {
      repeater()
    } else if (command === 'kembali') {
      prevStep()
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [command])

  useEffect(() => {
    setCommand(allWords[allWords.length - 1])
  }, [allWords])

  console.log(command)

  return (
    <div>
      <Head>
        <title>Recipe Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="pt-6 pb-12 h-[100vh] flex flex-col justify-center">
        <div className="fixed w-full top-8">
          <Link href={`/recipes/${slug}`} passHref>
            <a className="flex justify-between w-11/12 mx-auto">
              <div className="flex items-center space-x-4">
                <div>
                  <ArrowLeft />
                </div>
                <span className="-mt-0.5 text-xl">Selesai</span>{' '}
              </div>
            </a>
          </Link>
        </div>
        <audio ref={audioRef}>
          <source src="/static/audios/alarm.mpeg" type="audio/mpeg" />
          Your browser does not support the audio element.
        </audio>
        <Container>
          {steps.length != 0 && (
            <div className="flex flex-col justify-center w-full h-full">
              <div className="p-5">
                <h1 className="mb-4 text-xl font-semibold text-center">Langkah ke {currentStep + 1}</h1>
                <p className="text-center">
                  <span>&quot; {steps[currentStep].description} &quot;</span>
                </p>
                {steps[currentStep].timer > 0 && (
                  <div className="flex flex-col items-center mt-8">
                    <p className="text-3xl font-semibold">
                      <span>
                        <Countdown
                          ref={countdownRef}
                          date={Date.now() + steps[currentStep].timer}
                          autoStart={false}
                          renderer={renderer}
                        />
                      </span>
                    </p>
                    <span className="flex items-center mt-8">
                      {isPlay ? (
                        <button onClick={() => PauseTimer()}>
                          <StopIcon />
                        </button>
                      ) : (
                        <button onClick={() => StartTimer()}>
                          <PlayIcon />
                        </button>
                      )}
                    </span>{' '}
                  </div>
                )}
              </div>
            </div>
          )}
        </Container>
        <div className="fixed w-full bottom-6">
          <div className="flex justify-between w-10/12 mx-auto">
            <button onClick={() => prevStep()} disabled={isSpeak}>
              <ArrowLeftRounded />
            </button>
            <button onClick={() => repeater()} disabled={isSpeak}>
              <Repeat />
            </button>
            <button onClick={() => nextStep()} disabled={isSpeak}>
              <ArrowRightRounded />
            </button>
          </div>
        </div>
      </main>
    </div>
  )
}

export const getServerSideProps = async (ctx) => {
  const query = ctx.query

  return {
    props: {
      slug: query?.slug
    }
  }
}

export default CookingStepPage
